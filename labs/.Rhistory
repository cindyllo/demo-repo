points(height, price, pch = 3, col = "grey25", cex = 0.5)
plot.new()
plot.window(c(50, 250), c(0, 700))
axis(1, col.axis = "grey30")
axis(2, col.axis = "grey30")
title(main = "Relationship between Height and Price of Tents",
col.main = "blue",
xlab = "height", ylab = "price",
col.lab = "grey30",
font.lab = 3)
points(height, price, pch = 15, col = "grey25", cex = 0.5)
plot.new()
plot.window(c(50, 250), c(0, 700))
axis(1, col.axis = "grey30")
axis(2, col.axis = "grey30")
title(main = "Relationship between Height and Price of Tents",
col.main = "blue",
xlab = "height", ylab = "price",
col.lab = "grey30",
font.lab = 3)
points(height, price, pch = 07, col = "grey25", cex = 0.5)
plot.new()
plot.window(c(50, 250), c(0, 700))
axis(1, col.axis = "grey30")
axis(2, col.axis = "grey30")
title(main = "Relationship between Height and Price of Tents",
col.main = "blue",
xlab = "height", ylab = "price",
col.lab = "grey30",
font.lab = 3)
points(height, price, pch = 5, col = "grey25", cex = 0.5)
plot.new()
plot.window(c(50, 250), c(0, 700))
axis(1, col.axis = "grey30")
axis(2, col.axis = "grey30")
title(main = "Height v.s Price of Tents",
col.main = "blue",
xlab = "height", ylab = "price",
col.lab = "grey30",
font.lab = 3)
points(height, price, pch = 5, col = "grey25", cex = 0.5)
cor(height, price)
n <- length(bestuse)
n <- length(height)
mean <- mean(height)
mean
del(mean)
deletee
delete
??variance
height
sum(height)
xmean <- (1/n)*sum(height)
xmean
11325/90
xvar <- (1/(n-1))*((sum((height - xmean)))**2)
height - xmean
(height - mean)**2
sum((height - mean)**2)
sum((height - mean)**2) * (1/(n-2))
sum((height - mean)**2) * (1/(n-1))
(1/(n-1))*sum((height - mean)**2)
n <- length(height)
xmean <- (1/n)*sum(height)
ymean <- (1/n)*sum(price)
xvar <- (1/(n-1))*sum((height - mean)**2)
yvar <- (1/(n-1))*sum((price - mean)**2)
xsd <- sqrt(xvar)
ysd <- sqrt(yvar)
covxy <- (1/(n-1))*sum((height - xmean)*(price - ymean))
corxy <- covxy/(xsd * ysd)
n <- length(height)
xmean <- (1/n)*sum(height)
ymean <- (1/n)*sum(price)
xvar <- (1/(n-1))*sum((height - xmean)**2)
yvar <- (1/(n-1))*sum((price - ymean)**2)
xsd <- sqrt(xvar)
ysd <- sqrt(yvar)
covxy <- (1/(n-1))*sum((height - xmean)*(price - ymean))
corxy <- covxy/(xsd * ysd)
weight_lbs <- weight * 0.00220462
height_in <- height * 0.393701
price[price >= 300]
price[300<=price<=400]
price[300<=price & price<=400]
price[price >= 300 & price <= 400]
tents
tents[which(price = max(price))]
tents.which(price = max(price))
tents.where(price = max(price))
tents[where(price = max(price))]
tents[which(price = max(price))]
tents[which(price == max(price))]
tent[which(price == max(price))]
length(tent[which(price > 400 & weight < 1500)])
max(price)
tent[which(price == 699.95)]
percentile
quantile(height, 0.9)
height_p90 <- quantile(height, 0.9)
height_p90
height > height_p90
tent[which(height > height_p90 & weight > weight_p90)]
weight_p90 <- quantile(weight, 0.9)
weight_p90
tent[which(height > height_p90 & weight > weight_p90)]
??cut
cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000), ("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
cut(weight, 8, ("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
cut(weight, 8, labels = ("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
cut(weight, 8, labels = "1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")
cut(weight, 9, labels = "1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")
cut(weight, 9, labels = ("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"])
cut(weight, 9, labels = (1kg, 2kg, 3kg, 4kg, 5kg, 6kg, 7kg, 8kg, 9kg]))
cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")
)
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
)
table(cut(weight, 8, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
)
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(factor(weight), 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, c(0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, c(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"), right = 9000))
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"), right = TRUE))
table(cut(weight, 9, labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"), right = FALSE))
cut(weight, breaks = seq(0, 9000, by = 1000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg"))
table(cut(weight, breaks = seq(0, 9000, by = 1000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
season
factor(season)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
season <- factor(season)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
season
season_fac <- season
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
factor(season)
factor(season, ordered = TRUE)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
factor(season_fac, ordered = TRUE)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
??season
knitr::opts_chunk$set(echo = TRUE)
github <- 'https://github.com/ucb-stat133/stat133-fall-2018/'
repo <- 'raw/master/data/tents.RData'
download.file(url = paste0(github,repo), destfile = "tents.RData")
load("tents.RData")
ls()
is.list(tent)
is.vector(tent)
is.matrix(tent)
is.data.frame(tent)
is.factor(tent)
tent
tents <- data.frame(tent)
tents
tents[1:5,]
tents[88:90,]
summary(price)
mean(price)
sd(price)
min(price)
max(price)
median(price)
quantile(price, 1/4)
quantile(price, 3/4)
hist(price)
boxplot(price)
plot(density(price))
hist(height)
boxplot(height)
plot(density(height))
max(height) - min(height)
bestuse
bestuse_fac <- factor(bestuse)
bestuse_table <- table(bestuse_fac)
bestuse_table
backpacking_freq <- bestuse_table[[1]]/sum(bestuse_table[1:3])
backpacking_freq
carcamping_freq <- bestuse_table[[2]]/sum(bestuse_table[1:3])
carcamping_freq
mountaineering_freq <- bestuse_table[[3]]/sum(bestuse_table[1:3])
mountaineering_freq
barplot(bestuse_table)
plot(heightbyprice)
knitr::opts_chunk$set(echo = TRUE)
github <- 'https://github.com/ucb-stat133/stat133-fall-2018/'
repo <- 'raw/master/data/tents.RData'
download.file(url = paste0(github,repo), destfile = "tents.RData")
load("tents.RData")
ls()
is.list(tent)
is.vector(tent)
is.matrix(tent)
is.data.frame(tent)
is.factor(tent)
tent
tents <- data.frame(tent)
tents
tents[1:5,]
tents[88:90,]
summary(price)
mean(price)
sd(price)
min(price)
max(price)
median(price)
quantile(price, 1/4)
quantile(price, 3/4)
hist(price)
boxplot(price)
plot(density(price))
hist(height)
boxplot(height)
plot(density(height))
max(height) - min(height)
bestuse
bestuse_fac <- factor(bestuse)
bestuse_table <- table(bestuse_fac)
bestuse_table
backpacking_freq <- bestuse_table[[1]]/sum(bestuse_table[1:3])
backpacking_freq
carcamping_freq <- bestuse_table[[2]]/sum(bestuse_table[1:3])
carcamping_freq
mountaineering_freq <- bestuse_table[[3]]/sum(bestuse_table[1:3])
mountaineering_freq
barplot(bestuse_table)
heightbyprice <- data.frame(height, price)
plot(heightbyprice)
knitr::opts_chunk$set(echo = TRUE)
github <- 'https://github.com/ucb-stat133/stat133-fall-2018/'
repo <- 'raw/master/data/tents.RData'
download.file(url = paste0(github,repo), destfile = "tents.RData")
load("tents.RData")
ls()
is.list(tent)
is.vector(tent)
is.matrix(tent)
is.data.frame(tent)
is.factor(tent)
tent
tents <- data.frame(tent)
tents
tents[1:5,]
tents[88:90,]
summary(price)
mean(price)
sd(price)
min(price)
max(price)
median(price)
quantile(price, 1/4)
quantile(price, 3/4)
hist(price)
boxplot(price)
plot(density(price))
hist(height)
boxplot(height)
plot(density(height))
max(height) - min(height)
bestuse
bestuse_fac <- factor(bestuse)
bestuse_table <- table(bestuse_fac)
bestuse_table
backpacking_freq <- bestuse_table[[1]]/sum(bestuse_table[1:3])
backpacking_freq
carcamping_freq <- bestuse_table[[2]]/sum(bestuse_table[1:3])
carcamping_freq
mountaineering_freq <- bestuse_table[[3]]/sum(bestuse_table[1:3])
mountaineering_freq
barplot(bestuse_table)
heightbyprice <- data.frame(height, price)
plot(heightbyprice)
plot.new()
plot.window(c(50, 250), c(0, 700))
axis(1, col.axis = "grey30")
axis(2, col.axis = "grey30")
title(main = "Height vs. Price of Tents",
col.main = "blue",
xlab = "height", ylab = "price",
col.lab = "grey30",
font.lab = 3)
points(height, price, pch = 5, col = "grey25", cex = 0.5)
cor(height, price)
n <- length(height)
xmean <- (1/n)*sum(height)
ymean <- (1/n)*sum(price)
xvar <- (1/(n-1))*sum((height - xmean)**2)
yvar <- (1/(n-1))*sum((price - ymean)**2)
xsd <- sqrt(xvar)
ysd <- sqrt(yvar)
covxy <- (1/(n-1))*sum((height - xmean)*(price - ymean))
corxy <- covxy/(xsd * ysd)
weight_lbs <- weight * 0.00220462
height_in <- height * 0.393701
price[price >= 300]
price[price >= 300 & price <= 400]
tent[which(price == max(price))]
length(tent[which(price > 400 & weight < 1500)])
height_p90 <- quantile(height, 0.9)
height_p90
weight_p90 <- quantile(weight, 0.9)
weight_p90
tent[which(height > height_p90 & weight > weight_p90)]
table(cut(weight, breaks = seq(0, 9000, by = 1000), labels = c("1kg", "2kg", "3kg", "4kg", "5kg", "6kg", "7kg", "8kg", "9kg")))
season_fac <- factor(season)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
??factor
season_fac <- ordered(season_fac)
season_fac
summary(season_fac)
is.ordered(season_fac)
season_fac
season_fac <- ordered(season_fac)
summary(season_fac)
??ordered
season
season_facs <- factor(season, ordered = is.ordered(season))
summary(season_facs)
season
season_fac
season_facs <- factor(season, labels = c(3-season, 3-4-season, 4-season))
season_facs <- factor(season, ordered = c(3-season, 3-4-season, 4-season))
season_facs <- factor(season, labels = c("3-season", "3-4-season", "4-season")ordered = TRUE)
season_facs <- factor(season, labels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
season_facs
season_fac <- factor(season)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
season_facs <- factor(season, labels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
season_facs
season_fac <- factor(season)
summary(season_fac)
nlevels(season_fac)
is.ordered(season_fac)
season_facs <- factor(season, labels = c("3-season", "3-4-season", "4-season"), ordered = TRUE)
summary(season_facs)
nlevels(season_facs)
is.ordered(season_facs)
getwd()
dat <- load('installed_packages.RData')
dat <- load('installed_packages.RData')
??mkdir
knitr::opts_chunk$set(echo = TRUE)
mkdir('~/Desktop/stat133/stat133-lab03')
mkdir(~/Desktop/stat133/stat133-lab03)
mkdir(~/Desktop/stat133/stat133-lab03)
mkdir(Desktop/stat133/stat133-lab03)
mkdir("~/Desktop/stat133/stat133-lab03"")
mkdir("~/Desktop/stat133/stat133-lab03"")
mkdir("~/Desktop/stat133/stat133-lab03")
mkdir("~/Desktop/stat133/stat133-lab03")
getwd()
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
abalone
typeof(abalone)
typeof(abalone[1])
typeof(abalone[[1]])
wd()
getwd()
??setwd
setwd("Users/cindyllo/Desktop/stat133/lab")
getwd("Users/cindyllo/Desktop/stat133/lab")
getwd("/Users/cindyllo/Desktop/stat133/lab")
setwd("/Users/cindyllo/Desktop/stat133/lab")
setwd(/Users/cindyllo/Desktop/stat133)
setwd(Users/cindyllo/Desktop/stat133)
setwd(cindyllo/Desktop/stat133)
setwd(Desktop/stat133)
setwd(~/Desktop/stat133)
setwd(~/Desktop/stat133/)
setwd("~/Desktop/stat133/"")
setwd("~/Desktop/stat133/)
setwd("~/Desktop/stat133/")
setwd("~/Desktop/stat133/lab")
setwd("~/lab")
setwd("~/labs")
setwd("~/Desktop/stat133/labs")
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
destination <- 'abalone.data'
download.file(origin, destination)
ls
ls()
abalone <- read.table("abalone.data", sep = ",")
head(abalone)
tail(abalone)
str(abalone, vec.len = 1)
column_names <- c("Name", "Data Type", "Meas.", "Description")
column_types <- c("nominal", "continuous", "continuous", "continuous", "continuous", "continuous", "continuous", "continuous", "integer")
column_types <- c("character", "real","real","real","real","real","real","real","integer")
??read.table
read.table(abalone)
read.table("abalone")
read.table("abalone.data")
read.table("abalone.data", col_names = column_names, col_types = column_types)
read.table("abalone.data", col_names = "column_names", col_types = "column_types")
column_names <- c("Sex", "Length", "Diameter", "Height", "Whole weight", "Shucked weight", "Viscera weight", "Shell weight", "Rings")
read.table("abalone.data", col_names = "column_names", col_types = "column_types")
column_types
read.table("abalone.data", col_names = column_names, col_types = column_types)
read.table("abalone.data", col_names = column_names, col_types = column_types, sep = ",")
read.table("abalone.data", sep = ',', col_names = column_names, col_types = column_type)
read.table("abalone.data", col_names = column_names, col_types = column_types)
read.table("abalone.data", col.names = column_names, colClasses = column_types)
read.table("abalone.data", sep = "," col.names = column_names, colClasses = column_types)
read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
abalone
abalone <- read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
abalone
str(abalone)
??read.csv
read.csv("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
abalone2 <- read.csv("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
abalone2
str(abalone2)
head(abalone.data, 10)
head(abalone.data)
head(abalone, 10)
??head
head(abalone, -10)
abalone
head(abalone, skip = 10)
head(abalone, skip = 10, 10)
min(abalone)
min(abalone[1])
abalone[1]
min(abalone[2])
min(abalone[2-9])
min(abalone[2])
min(abalone[3])
min(abalone[2:9])
min(abalone[c(2, 3, 4, 5, 6, 7, 8, 9)])
min(abalone[2])
std(abalone[2])
??standarddeviation
sd(abalone[2])
mean(abalone[2])
min(abalone[2])
typeof(abalone[2])
factor(abalone)
factor(abalone[2])
mean(factor(abalone[2]))
is.data.frame(abalone)
apply(abalone, 2-9, min)
apply(abalone, 2, min)
apply(abalone, 2, max)
apply(abalone, 2, mean)
average
mean
??apply
column_types <- c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
abalone <- read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone)
abalone2 <- read.csv("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone2)
abalone10 <- head(abalone, 10)
str(abalone10)
abalone20 <- head(abalone, skip = 10, 10)
str(abalone20)
apply(abalone, 2, min)
apply(abalone, 2, max)
apply(abalone, 2, mean)
column_names <- c("Sex", "Length", "Diameter", "Height", "Whole weight", "Shucked weight", "Viscera weight", "Shell weight", "Rings")
column_types <- c("character", "numeric", "real", "real", "real", "real", "real", "real", "integer")
abalone <- read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone)
abalone2 <- read.csv("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone2)
abalone10 <- head(abalone, 10)
str(abalone10)
abalone20 <- head(abalone, skip = 10, 10)
str(abalone20)
apply(abalone, 2, min)
apply(abalone, 2, max)
apply(abalone, 2, sd)
apply(abalone, 2, sd)
apply(abalone, 2, mean)
mean(abalone)
mean(abalone[2])
summary(abalone)
factor9sex
factor(sex)
factor(abalone[1])
abalone[1]
factor(abalone)
abalone4 <- abalone
abalone4[1] <- factor(abalone4[1])
abalone4
summary(abalone4)
apply(abalone4, 2, sd)
factor(abalone4[1]) <- "character"
factor(abalone4[1]) = "character"
